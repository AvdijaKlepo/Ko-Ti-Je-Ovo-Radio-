// <auto-generated />
using System;
using KoRadio.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoRadio.Services.Migrations
{
    [DbContext(typeof(KoTiJeOvoRadioContext))]
    [Migration("20250916124042_JobEmployeesCancelled")]
    partial class JobEmployeesCancelled
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoRadio.Services.Database.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("BusinessCertificate")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExperianceYears")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<decimal>("RatingSum")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TotalRatings")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.HasKey("CompanyId")
                        .HasName("PK__Company__2D971C4CB07C8C16");

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "Email" }, "UQ_Company_Email")
                        .IsUnique();

                    b.ToTable("Company", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Bio = "Firma koja se bavi elektroinstalacijama i održavanjem električnih sistema.",
                            CompanyName = "Elektroinženjering d.o.o.",
                            Email = "elektro@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 5,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            PhoneNumber = "+38761223226",
                            Rating = 4.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 2,
                            Bio = "Firma koja se bavi elektroinstalacijama i održavanjem električnih sistema te keramikom.",
                            CompanyName = "Elektroinženjering i Keramika d.o.o.",
                            Email = "elektroKeramika@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 3,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            PhoneNumber = "+38761223312",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 3,
                            Bio = "Firma koja se bavi zidarstvom i molerajom.",
                            CompanyName = "Zidarstvo i Moleraj d.o.o.",
                            Email = "zidarmoler@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            PhoneNumber = "+38761223317",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 4,
                            Bio = "Firma koja se bavi molerajom i higijenom.",
                            CompanyName = "Moleraj i Higijena d.o.o.",
                            Email = "higijenamoler@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 2,
                            PhoneNumber = "+38761223327",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 5,
                            Bio = "Firma koja se bavi umrežavanjem",
                            CompanyName = "Umreži",
                            Email = "umreži@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 2,
                            PhoneNumber = "+38761423327",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 6,
                            Bio = "Firma koja se bavi staklarstvom",
                            CompanyName = "Staklo Mostar",
                            Email = "staklo@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            PhoneNumber = "+38761433327",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        },
                        new
                        {
                            CompanyId = 7,
                            Bio = "Firma koja se bavi zidarstvom",
                            CompanyName = "Zidarstvo Sarajevo",
                            Email = "zidari@email.com",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 2,
                            PhoneNumber = "+38761434327",
                            Rating = 3.00m,
                            RatingSum = 72.00m,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 17,
                            WorkingDays = 54
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyEmployee", b =>
                {
                    b.Property<int>("CompanyEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyEmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyEmployeeId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("CompanyRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CompanyEmployeeId")
                        .HasName("PK__CompanyE__3916BD7B00AC7565");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyEmployee", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyEmployeeId = 1,
                            CompanyId = 1,
                            CompanyRoleId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 6
                        },
                        new
                        {
                            CompanyEmployeeId = 2,
                            CompanyId = 1,
                            CompanyRoleId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 5
                        },
                        new
                        {
                            CompanyEmployeeId = 3,
                            CompanyId = 3,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 5
                        },
                        new
                        {
                            CompanyEmployeeId = 4,
                            CompanyId = 5,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 5
                        },
                        new
                        {
                            CompanyEmployeeId = 5,
                            CompanyId = 7,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 5
                        },
                        new
                        {
                            CompanyEmployeeId = 6,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 15
                        },
                        new
                        {
                            CompanyEmployeeId = 7,
                            CompanyId = 4,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 15
                        },
                        new
                        {
                            CompanyEmployeeId = 8,
                            CompanyId = 6,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = true,
                            UserId = 15
                        },
                        new
                        {
                            CompanyEmployeeId = 9,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 16
                        },
                        new
                        {
                            CompanyEmployeeId = 10,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 16
                        },
                        new
                        {
                            CompanyEmployeeId = 11,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 17
                        },
                        new
                        {
                            CompanyEmployeeId = 12,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 17
                        },
                        new
                        {
                            CompanyEmployeeId = 13,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 18
                        },
                        new
                        {
                            CompanyEmployeeId = 14,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 18
                        },
                        new
                        {
                            CompanyEmployeeId = 15,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 19
                        },
                        new
                        {
                            CompanyEmployeeId = 16,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 19
                        },
                        new
                        {
                            CompanyEmployeeId = 17,
                            CompanyId = 2,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 20
                        },
                        new
                        {
                            CompanyEmployeeId = 18,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 20
                        },
                        new
                        {
                            CompanyEmployeeId = 19,
                            CompanyId = 3,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 16
                        },
                        new
                        {
                            CompanyEmployeeId = 20,
                            CompanyId = 4,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 20
                        },
                        new
                        {
                            CompanyEmployeeId = 21,
                            CompanyId = 5,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 20
                        },
                        new
                        {
                            CompanyEmployeeId = 22,
                            CompanyId = 6,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 18
                        },
                        new
                        {
                            CompanyEmployeeId = 23,
                            CompanyId = 1,
                            DateJoined = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsApplicant = false,
                            IsDeleted = false,
                            IsOwner = false,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyJobAssignment", b =>
                {
                    b.Property<int>("CompanyJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyJobID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyJobId"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CompanyEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyEmployeeID");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.HasKey("CompanyJobId")
                        .HasName("PK__CompanyJ__B783C37E390DA91B");

                    b.HasIndex("CompanyEmployeeId");

                    b.HasIndex("JobId");

                    b.ToTable("CompanyJobAssignment", (string)null);
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyRole", b =>
                {
                    b.Property<int>("CompanyRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyRoleId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyRoleId")
                        .HasName("PK__CompanyR__9CF06B50EF6710FD");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyRole", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyRoleId = 1,
                            CompanyId = 1,
                            RoleName = "Vlasnik"
                        },
                        new
                        {
                            CompanyRoleId = 2,
                            CompanyId = 1,
                            RoleName = "Terenac"
                        },
                        new
                        {
                            CompanyRoleId = 3,
                            CompanyId = 2,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            CompanyRoleId = 4,
                            CompanyId = 2,
                            RoleName = "Terenac"
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyService", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId", "ServiceId")
                        .HasName("PK__CompanyS__91C6A7424FCFED49");

                    b.HasIndex("ServiceId");

                    b.ToTable("CompanyService", (string)null);

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 2,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 2,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 3,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 3,
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 4,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 4,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 5,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 5,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 6,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 6,
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 7,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CompanyId = 7,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.EmployeeTask", b =>
                {
                    b.Property<int>("EmployeeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTaskId"));

                    b.Property<int?>("CompanyEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EmployeeTaskId")
                        .HasName("PK__Employee__47942B9E0BC0A370");

                    b.HasIndex("CompanyEmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobId");

                    b.ToTable("EmployeeTask", (string)null);
                });

            modelBuilder.Entity("KoRadio.Services.Database.Freelancer", b =>
                {
                    b.Property<int>("FreelancerId")
                        .HasColumnType("int")
                        .HasColumnName("FreelancerID");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("CV")
                        .HasColumnType("varbinary(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExperianceYears")
                        .HasColumnType("int");

                    b.Property<bool>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<double?>("RatingSum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("TotalRatings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId")
                        .HasName("PK__Freelanc__3D00E30C80E0E635");

                    b.ToTable("Freelancer", (string)null);

                    b.HasData(
                        new
                        {
                            FreelancerId = 4,
                            Bio = "Iskusan električar sa 6 godina iskustva. Završen zanat u elektrotehničkoj školi u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 6,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 3.63m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 9,
                            Bio = "Iskusan keramičar sa 4 godina iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 4,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 10,
                            Bio = "Iskusan moler sa 9 godina iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 9,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 11,
                            Bio = "Iskusan zidar sa 5 godina iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 5,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 12,
                            Bio = "Iskusan staklar sa 7 godina iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 7,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 13,
                            Bio = "Iskusan radnik za higijenu sa 3 godine iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 3,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        },
                        new
                        {
                            FreelancerId = 14,
                            Bio = "Iskusan radnik za mreže sa 4 godine iskustva. Završen zanat u Mostaru.",
                            EndTime = new TimeOnly(16, 0, 0),
                            ExperianceYears = 4,
                            IsApplicant = false,
                            IsDeleted = false,
                            Rating = 4.00m,
                            RatingSum = 0.0,
                            StartTime = new TimeOnly(8, 0, 0),
                            TotalRatings = 0,
                            WorkingDays = 54
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.FreelancerService", b =>
                {
                    b.Property<int>("FreelancerId")
                        .HasColumnType("int")
                        .HasColumnName("FreelancerID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAT");

                    b.HasKey("FreelancerId", "ServiceId")
                        .HasName("PK__Freelanc__815158029BB39A82");

                    b.HasIndex("ServiceId");

                    b.ToTable("FreelancerService", (string)null);

                    b.HasData(
                        new
                        {
                            FreelancerId = 4,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 4,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 4,
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 9,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 9,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 9,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 10,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 10,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 10,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 11,
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 11,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 11,
                            ServiceId = 7,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 12,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 12,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 12,
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 13,
                            ServiceId = 7,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 13,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 13,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 14,
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 14,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FreelancerId = 14,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("EndEstimate")
                        .HasColumnType("time");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int")
                        .HasColumnName("FreelancerID");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeletedWorker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreelancer")
                        .HasColumnType("bit")
                        .HasColumnName("isFreelancer");

                    b.Property<bool>("IsInvoiced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTenderFinalized")
                        .HasColumnType("bit")
                        .HasColumnName("isTenderFinalized");

                    b.Property<bool>("IsWorkerEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("JobStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("unnaproved")
                        .HasColumnName("Job_Status");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("PayEstimate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("PayInvoice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("RescheduleNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<TimeOnly?>("StartEstimate")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("JobId")
                        .HasName("PK__Jobs__056690C234DE197E");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            FreelancerId = 4,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 2,
                            FreelancerId = 9,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebno postavljanje keramike na balkonu",
                            JobStatus = "finished",
                            JobTitle = "Postavljanje keramike",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 3,
                            FreelancerId = 10,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 4,
                            FreelancerId = 4,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebno postavljanje keramike na balkonu",
                            JobStatus = "finished",
                            JobTitle = "Postavljanje keramike",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 5,
                            FreelancerId = 11,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 6,
                            FreelancerId = 12,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebno postavljanje keramike na balkonu",
                            JobStatus = "finished",
                            JobTitle = "Postavljanje keramike",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 7,
                            FreelancerId = 9,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebno krečenje i farbanje zidova u kući, uključujući pripremu površina i završne radove.",
                            JobStatus = "finished",
                            JobTitle = "Molerski radovi u kući",
                            UserId = 21
                        },
                        new
                        {
                            JobId = 8,
                            FreelancerId = 11,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna hitna popravka krova zbog curenja vode, uključujući zamjenu oštećenih delova i hidroizolaciju.",
                            JobStatus = "finished",
                            JobTitle = "Popravka krova",
                            UserId = 21
                        },
                        new
                        {
                            JobId = 9,
                            FreelancerId = 13,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna instalacija solarnih panela na krovu kuće, uključujući montažu i povezivanje sa električnim sistemom.",
                            JobStatus = "finished",
                            JobTitle = "Instalacija solarnih panela",
                            UserId = 21
                        },
                        new
                        {
                            JobId = 10,
                            CompanyId = 1,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 11,
                            CompanyId = 2,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 12,
                            CompanyId = 4,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 2
                        },
                        new
                        {
                            JobId = 13,
                            CompanyId = 1,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 14,
                            CompanyId = 5,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 15,
                            CompanyId = 7,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 3
                        },
                        new
                        {
                            JobId = 16,
                            CompanyId = 1,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 21
                        },
                        new
                        {
                            JobId = 17,
                            CompanyId = 2,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 21
                        },
                        new
                        {
                            JobId = 18,
                            CompanyId = 4,
                            IsApproved = false,
                            IsDeleted = false,
                            IsDeletedWorker = false,
                            IsEdited = false,
                            IsFreelancer = false,
                            IsInvoiced = true,
                            IsRated = true,
                            IsTenderFinalized = false,
                            IsWorkerEdited = false,
                            JobDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobDescription = "Potrebna popravka elektroinstalacija u stanu, uključujući zamjenu prekidača i utičnica.",
                            JobStatus = "finished",
                            JobTitle = "Popravka elektroinstalacija",
                            UserId = 21
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.JobsService", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("JobId", "ServiceId")
                        .HasName("PK__JobsServ__B9372BC2B802A0FE");

                    b.HasIndex("ServiceId");

                    b.ToTable("JobsService", (string)null);

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 2,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 3,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 4,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 5,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 6,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 7,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 8,
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 9,
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 10,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 11,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 12,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 13,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 14,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 15,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 16,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 17,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = 18,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__E7FEA4779B95C597");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            IsDeleted = false,
                            LocationName = "Mostar"
                        },
                        new
                        {
                            LocationId = 2,
                            IsDeleted = false,
                            LocationName = "Sarajevo"
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<string>("Message1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Message");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C0C9CD5627697");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCF591ED19A");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            IsShipped = false,
                            OrderNumber = 20124,
                            Price = 0m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            IsShipped = false,
                            OrderNumber = 20125,
                            Price = 0m,
                            UserId = 3
                        },
                        new
                        {
                            OrderId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            IsShipped = false,
                            OrderNumber = 20126,
                            Price = 0m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCancelled = false,
                            IsShipped = false,
                            OrderNumber = 20127,
                            Price = 0m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemsId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemsId")
                        .HasName("PK__OrderIte__D5BB2555E439B0B6");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemsId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            ProductPrice = 0m,
                            Quantity = 2,
                            StoreId = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 2,
                            OrderId = 1,
                            ProductId = 4,
                            ProductPrice = 0m,
                            Quantity = 5,
                            StoreId = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 3,
                            OrderId = 2,
                            ProductId = 2,
                            ProductPrice = 0m,
                            Quantity = 1,
                            StoreId = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 4,
                            OrderId = 2,
                            ProductId = 3,
                            ProductPrice = 0m,
                            Quantity = 3,
                            StoreId = 1,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 5,
                            OrderId = 3,
                            ProductId = 5,
                            ProductPrice = 0m,
                            Quantity = 4,
                            StoreId = 2,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 6,
                            OrderId = 3,
                            ProductId = 6,
                            ProductPrice = 0m,
                            Quantity = 2,
                            StoreId = 2,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 7,
                            OrderId = 4,
                            ProductId = 7,
                            ProductPrice = 0m,
                            Quantity = 1,
                            StoreId = 2,
                            UnitPrice = 0m
                        },
                        new
                        {
                            OrderItemsId = 8,
                            OrderId = 4,
                            ProductId = 8,
                            ProductPrice = 0m,
                            Quantity = 3,
                            StoreId = 2,
                            UnitPrice = 0m
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutOfStock")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SaleExpires")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6CDD7BA1DD8");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 25.00m,
                            ProductDescription = " Produžni kabl dužine 5 metara, idealan za kućnu i kancelarijsku upotrebu.",
                            ProductName = "Produžni kabl 5m",
                            StockQuantity = 0,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 45.00m,
                            ProductDescription = "Visokokvalitetni Ethernet kabal dužine 20 metara za pouzdanu mrežnu povezanost.",
                            ProductName = "Ethernet kabal 20m",
                            StockQuantity = 0,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 15.00m,
                            ProductDescription = "Standardni prekidač naizmenične struje za kućnu i industrijsku upotrebu.",
                            ProductName = "Prekidač naizmenične struje",
                            StockQuantity = 0,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 10.00m,
                            ProductDescription = "Energetski efikasna LED žarulja snage 9W, pruža jarko svetlo uz nisku potrošnju energije.",
                            ProductName = "LED žarulja 9W",
                            StockQuantity = 0,
                            StoreId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 20.00m,
                            ProductDescription = "Visokokvalitetna ravna keramika dimenzija 30x30cm, idealna za podove i zidove.",
                            ProductName = "Ravna keramika 30x30cm",
                            StockQuantity = 0,
                            StoreId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 15.00m,
                            ProductDescription = "Izdržljive keramičke pločice dimenzija 20x20cm, pogodne za različite površine.",
                            ProductName = "Keramičke pločice 20x20cm",
                            StockQuantity = 0,
                            StoreId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 30.00m,
                            ProductDescription = "Kvalitetna fug masa u pakovanju od 5kg, idealna za popunjavanje spojeva između pločica.",
                            ProductName = "Fug masa 5kg",
                            StockQuantity = 0,
                            StoreId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 50.00m,
                            ProductDescription = "Snažno ljepilo za keramiku u pakovanju od 10kg, pruža čvrsto prizemljivanje pločica na različite površine.",
                            ProductName = "Ljepilo za keramiku 10kg",
                            StockQuantity = 0,
                            StoreId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 8.00m,
                            ProductDescription = "Visokokvalitetni cement u pakovanju od 25kg, pogodan za različite građevinske radove.",
                            ProductName = "Cement 25kg",
                            StockQuantity = 0,
                            StoreId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 5.00m,
                            ProductDescription = "Fini pijesak u pakovanju od 50kg, idealan za malterisanje i druge građevinske primjene.",
                            ProductName = "Pijesak 50kg",
                            StockQuantity = 0,
                            StoreId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 12.00m,
                            ProductDescription = "Kvalitetan malter u pakovanju od 30kg, pogodan za unutrašnje i vanjske zidove.",
                            ProductName = "Malter 30kg",
                            StockQuantity = 0,
                            StoreId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 25.00m,
                            ProductDescription = "Unutrašnja boja za zidove u pakovanju od 5L, dostupna u različitim bojama.",
                            ProductName = "Boja za zidove 5L",
                            StockQuantity = 0,
                            StoreId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 15.00m,
                            ProductDescription = "Visokokvalitetni lak za drvo u pakovanju od 1L, pruža zaštitu i sjaj drvenim površinama.",
                            ProductName = "Lak za drvo 1L",
                            StockQuantity = 0,
                            StoreId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 7.00m,
                            ProductDescription = "Kvalitetan valjak za boju, idealan za brzo i ravnomerno nanošenje boje na zidove.",
                            ProductName = "Valjak za boju",
                            StockQuantity = 0,
                            StoreId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 5.00m,
                            ProductDescription = "Izdržljiva četka za boju, pogodna za precizno nanošenje boje na različite površine.",
                            ProductName = "Četka za boju",
                            StockQuantity = 0,
                            StoreId = 4
                        },
                        new
                        {
                            ProductId = 16,
                            IsDeleted = false,
                            IsOnSale = false,
                            IsOutOfStock = false,
                            Price = 40.00m,
                            ProductDescription = "Velika kanta za boju u pakovanju od 10L, idealna za veće projekte farbanja.",
                            ProductName = "Kanta za boju 10L",
                            StockQuantity = 0,
                            StoreId = 4
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.ProductsService", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId", "ServiceId")
                        .HasName("PK__Products__085D7DE34C94B474");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProductsService", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 2,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 3,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 4,
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 5,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 6,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 7,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 8,
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 9,
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 10,
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 11,
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 12,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 13,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 14,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 15,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 16,
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3A92DD3D4B");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B61606615CF66")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsDeleted = false,
                            RoleDescription = "Administrator for the application",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            IsDeleted = false,
                            RoleDescription = "Application User",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 3,
                            IsDeleted = false,
                            RoleDescription = "Freelance worker",
                            RoleName = "Freelancer"
                        },
                        new
                        {
                            RoleId = 4,
                            IsDeleted = false,
                            RoleDescription = "Company Administrator",
                            RoleName = "Company Admin"
                        },
                        new
                        {
                            RoleId = 5,
                            IsDeleted = false,
                            RoleDescription = "Employee for a company",
                            RoleName = "CompanyEmployee"
                        },
                        new
                        {
                            RoleId = 6,
                            IsDeleted = false,
                            RoleDescription = "Administrator for a store",
                            RoleName = "StoreAdministrator"
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__C51BB0EAAC6763C6");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            IsDeleted = false,
                            ServiceName = "Keramika"
                        },
                        new
                        {
                            ServiceId = 2,
                            IsDeleted = false,
                            ServiceName = "Elektrika"
                        },
                        new
                        {
                            ServiceId = 3,
                            IsDeleted = false,
                            ServiceName = "Molereaj"
                        },
                        new
                        {
                            ServiceId = 4,
                            IsDeleted = false,
                            ServiceName = "Mreže"
                        },
                        new
                        {
                            ServiceId = 5,
                            IsDeleted = false,
                            ServiceName = "Staklarstvo"
                        },
                        new
                        {
                            ServiceId = 6,
                            IsDeleted = false,
                            ServiceName = "Zidarstvo"
                        },
                        new
                        {
                            ServiceId = 7,
                            IsDeleted = false,
                            ServiceName = "Higijena"
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("BusinessCertificate")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("RatingSum")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte[]>("StoreCatalogue")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("StoreCataloguePublish")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalRatings")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.HasKey("StoreId")
                        .HasName("PK__Stores__3B82F10142B7B44A");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Address = "Mostar, b.b.",
                            Description = "Prodaja elektro materijala i alata.",
                            EndTime = new TimeOnly(0, 0, 0),
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            Rating = 0m,
                            StartTime = new TimeOnly(0, 0, 0),
                            StoreName = "Elektro Materijal",
                            UserId = 7,
                            WorkingDays = 0
                        },
                        new
                        {
                            StoreId = 2,
                            Address = "Mostar, b.b.",
                            Description = "Prodaja keramike",
                            EndTime = new TimeOnly(0, 0, 0),
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 1,
                            Rating = 0m,
                            StartTime = new TimeOnly(0, 0, 0),
                            StoreName = "Keramik Stop",
                            UserId = 8,
                            WorkingDays = 0
                        },
                        new
                        {
                            StoreId = 3,
                            Address = "Sarajevo, b.b.",
                            Description = "Prodaja građevinskog materijala i alata.",
                            EndTime = new TimeOnly(0, 0, 0),
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 2,
                            Rating = 0m,
                            StartTime = new TimeOnly(0, 0, 0),
                            StoreName = "Građevinski Materijal",
                            UserId = 3,
                            WorkingDays = 0
                        },
                        new
                        {
                            StoreId = 4,
                            Address = "Sarajevo, b.b.",
                            Description = "Prodaja boja i lakova za molerske radove.",
                            EndTime = new TimeOnly(0, 0, 0),
                            IsApplicant = false,
                            IsDeleted = false,
                            LocationId = 2,
                            Rating = 0m,
                            StartTime = new TimeOnly(0, 0, 0),
                            StoreName = "Moleraj Plus",
                            UserId = 3,
                            WorkingDays = 0
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreelancer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JobDate")
                        .HasColumnType("datetime");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TenderId")
                        .HasName("PK__Tender__B21B4268197B2C83");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("UserId");

                    b.ToTable("Tender", (string)null);
                });

            modelBuilder.Entity("KoRadio.Services.Database.TenderBid", b =>
                {
                    b.Property<int>("TenderBidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderBidId"));

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("BidDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime");

                    b.Property<TimeOnly?>("EndEstimate")
                        .HasColumnType("time");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("StartEstimate")
                        .HasColumnType("time");

                    b.HasKey("TenderBidId")
                        .HasName("PK__TenderBi__5C928D9693AA275C");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("TenderBid", (string)null);
                });

            modelBuilder.Entity("KoRadio.Services.Database.TenderService", b =>
                {
                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("TenderId", "ServiceId")
                        .HasName("PK__TenderSe__0E4AF96661B872C5");

                    b.HasIndex("ServiceId");

                    b.ToTable("TenderService", (string)null);
                });

            modelBuilder.Entity("KoRadio.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACDE55EC71");

                    b.HasIndex("LocationId");

                    b.HasIndex(new[] { "Email" }, "UQ_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@email.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LocationId = 1,
                            PasswordHash = "5tJjrb/iLUCEc6wZo/o0Se14Cnk=",
                            PasswordSalt = "OUJ+PWXNzP6V9uxMwP7FCg==",
                            PhoneNumber = "+38761223223"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "korisnik@email.com",
                            FirstName = "Korisnik",
                            IsDeleted = false,
                            LastName = "Aplikacije",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223224"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "korisnik2@email.com",
                            FirstName = "Aplikacijski",
                            IsDeleted = false,
                            LastName = "Korisnik",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223224"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "struja@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Struja",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223225"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vlasnik@email.com",
                            FirstName = "Administrator",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 6,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zaposlenik@email.com",
                            FirstName = "Zaposlenik",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223227"
                        },
                        new
                        {
                            UserId = 7,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trgovina@email.com",
                            FirstName = "Administrator",
                            IsDeleted = false,
                            LastName = "Trgovine",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223228"
                        },
                        new
                        {
                            UserId = 8,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trgovina2@email.com",
                            FirstName = "Keramika",
                            IsDeleted = false,
                            LastName = "Trgovina",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223229"
                        },
                        new
                        {
                            UserId = 9,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "keramika@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Keramika",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 10,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "moler@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Moler",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 11,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zidar@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Zidar",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 12,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staklar@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Staklar",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 13,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "higijena@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Higijena",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 14,
                            Address = "Sarajevo, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mreze@email.com",
                            FirstName = "Radnik",
                            IsDeleted = false,
                            LastName = "Mreže",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223230"
                        },
                        new
                        {
                            UserId = 15,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "firma@email.com",
                            FirstName = "Vlasnik",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 2,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 16,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "terenac@email.com",
                            FirstName = "Terenac",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 17,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "monter@email.com",
                            FirstName = "Monter",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 18,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "novi@email.com",
                            FirstName = "Novi",
                            IsDeleted = false,
                            LastName = "Radnik",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 19,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dva@email.com",
                            FirstName = "Zaposlenik",
                            IsDeleted = false,
                            LastName = "FirmeDva",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 20,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "uposlenik@email.com",
                            FirstName = "Uposlenik",
                            IsDeleted = false,
                            LastName = "Firme",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        },
                        new
                        {
                            UserId = 21,
                            Address = "Mostar, b.b.",
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@email.com",
                            FirstName = "Test",
                            IsDeleted = false,
                            LastName = "Tester",
                            LocationId = 1,
                            PasswordHash = "oJyCENbGhk5rSYLZRG0FGb32ejw=",
                            PasswordSalt = "gYMe5raFyV04jACZCJ7VIQ==",
                            PhoneNumber = "+38761223226"
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.UserRating", b =>
                {
                    b.Property<int>("UserRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRatingId"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<int?>("FreelancerId")
                        .HasColumnType("int")
                        .HasColumnName("FreelancerID");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRatingId")
                        .HasName("PK__UserRati__9E5FEAAA63E96E4C");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings");

                    b.HasData(
                        new
                        {
                            UserRatingId = 1,
                            FreelancerId = 4,
                            JobId = 1,
                            Rating = 5m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 2,
                            FreelancerId = 9,
                            JobId = 2,
                            Rating = 4m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 3,
                            FreelancerId = 10,
                            JobId = 3,
                            Rating = 3m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 4,
                            FreelancerId = 4,
                            JobId = 4,
                            Rating = 4m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 5,
                            FreelancerId = 11,
                            JobId = 5,
                            Rating = 5m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 6,
                            FreelancerId = 12,
                            JobId = 6,
                            Rating = 2m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 7,
                            FreelancerId = 9,
                            JobId = 7,
                            Rating = 5m,
                            UserId = 21
                        },
                        new
                        {
                            UserRatingId = 8,
                            FreelancerId = 11,
                            JobId = 8,
                            Rating = 4m,
                            UserId = 21
                        },
                        new
                        {
                            UserRatingId = 9,
                            FreelancerId = 13,
                            JobId = 9,
                            Rating = 3m,
                            UserId = 21
                        },
                        new
                        {
                            UserRatingId = 10,
                            CompanyId = 1,
                            JobId = 1,
                            Rating = 5m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 11,
                            CompanyId = 2,
                            JobId = 2,
                            Rating = 4m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 12,
                            CompanyId = 4,
                            JobId = 3,
                            Rating = 3m,
                            UserId = 2
                        },
                        new
                        {
                            UserRatingId = 13,
                            CompanyId = 1,
                            JobId = 4,
                            Rating = 4m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 14,
                            CompanyId = 5,
                            JobId = 5,
                            Rating = 5m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 15,
                            CompanyId = 7,
                            JobId = 6,
                            Rating = 2m,
                            UserId = 3
                        },
                        new
                        {
                            UserRatingId = 16,
                            CompanyId = 1,
                            JobId = 7,
                            Rating = 5m,
                            UserId = 21
                        },
                        new
                        {
                            UserRatingId = 17,
                            CompanyId = 2,
                            JobId = 8,
                            Rating = 4m,
                            UserId = 21
                        },
                        new
                        {
                            UserRatingId = 18,
                            CompanyId = 4,
                            JobId = 9,
                            Rating = 3m,
                            UserId = 21
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__3D978A551693E34E");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 7,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 4,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 8,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 9,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 10,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 7
                        },
                        new
                        {
                            UserRoleId = 11,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 6,
                            UserId = 7
                        },
                        new
                        {
                            UserRoleId = 12,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 8
                        },
                        new
                        {
                            UserRoleId = 13,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 6,
                            UserId = 8
                        },
                        new
                        {
                            UserRoleId = 14,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 9
                        },
                        new
                        {
                            UserRoleId = 15,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 9
                        },
                        new
                        {
                            UserRoleId = 16,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserRoleId = 17,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserRoleId = 18,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserRoleId = 19,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 11
                        },
                        new
                        {
                            UserRoleId = 20,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 12
                        },
                        new
                        {
                            UserRoleId = 21,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 12
                        },
                        new
                        {
                            UserRoleId = 22,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 13
                        },
                        new
                        {
                            UserRoleId = 23,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 13
                        },
                        new
                        {
                            UserRoleId = 24,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 14
                        },
                        new
                        {
                            UserRoleId = 25,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 3,
                            UserId = 14
                        },
                        new
                        {
                            UserRoleId = 26,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 15
                        },
                        new
                        {
                            UserRoleId = 27,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 4,
                            UserId = 15
                        },
                        new
                        {
                            UserRoleId = 28,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 16
                        },
                        new
                        {
                            UserRoleId = 29,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 16
                        },
                        new
                        {
                            UserRoleId = 30,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 17
                        },
                        new
                        {
                            UserRoleId = 31,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 17
                        },
                        new
                        {
                            UserRoleId = 32,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 18
                        },
                        new
                        {
                            UserRoleId = 33,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 18
                        },
                        new
                        {
                            UserRoleId = 34,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 19
                        },
                        new
                        {
                            UserRoleId = 35,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 19
                        },
                        new
                        {
                            UserRoleId = 36,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 20
                        },
                        new
                        {
                            UserRoleId = 37,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 5,
                            UserId = 20
                        },
                        new
                        {
                            UserRoleId = 38,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserRoleId = 39,
                            CreatedAt = new DateTime(2025, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = 4,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("KoRadio.Services.Database.Company", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Location", "Location")
                        .WithMany("Companies")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__Company__Locatio__0F2D40CE");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyEmployee", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CompanyEm__Compa__69C6B1F5");

                    b.HasOne("KoRadio.Services.Database.CompanyRole", "CompanyRole")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("CompanyRoleId")
                        .HasConstraintName("FK__CompanyEm__Compa__7BE56230");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CompanyEm__UserI__68D28DBC");

                    b.Navigation("Company");

                    b.Navigation("CompanyRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyJobAssignment", b =>
                {
                    b.HasOne("KoRadio.Services.Database.CompanyEmployee", "CompanyEmployee")
                        .WithMany("CompanyJobAssignments")
                        .HasForeignKey("CompanyEmployeeId")
                        .HasConstraintName("FK__CompanyJo__Compa__019E3B86");

                    b.HasOne("KoRadio.Services.Database.Job", "Job")
                        .WithMany("CompanyJobAssignments")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__CompanyJo__JobId__02925FBF");

                    b.Navigation("CompanyEmployee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyRole", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("CompanyRoles")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__CompanyRo__Compa__7AF13DF7");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyService", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("CompanyServices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CompanySe__Compa__1F98B2C1");

                    b.HasOne("KoRadio.Services.Database.Service", "Service")
                        .WithMany("CompanyServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CompanySe__Servi__208CD6FA");

                    b.Navigation("Company");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KoRadio.Services.Database.EmployeeTask", b =>
                {
                    b.HasOne("KoRadio.Services.Database.CompanyEmployee", "CompanyEmployee")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("CompanyEmployeeId")
                        .HasConstraintName("FK__EmployeeT__Compa__1387E197");

                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK__EmployeeT__Compa__269AB60B");

                    b.HasOne("KoRadio.Services.Database.Job", "Job")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__EmployeeT__JobId__25A691D2");

                    b.Navigation("Company");

                    b.Navigation("CompanyEmployee");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Freelancer", b =>
                {
                    b.HasOne("KoRadio.Services.Database.User", "FreelancerNavigation")
                        .WithOne("Freelancer")
                        .HasForeignKey("KoRadio.Services.Database.Freelancer", "FreelancerId")
                        .IsRequired()
                        .HasConstraintName("FK__Freelance__Freel__1B9317B3");

                    b.Navigation("FreelancerNavigation");
                });

            modelBuilder.Entity("KoRadio.Services.Database.FreelancerService", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Freelancer", "Freelancer")
                        .WithMany("FreelancerServices")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Freelance__Freel__1F63A897");

                    b.HasOne("KoRadio.Services.Database.Service", "Service")
                        .WithMany("FreelancerServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Freelance__Servi__2057CCD0");

                    b.Navigation("Freelancer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Job", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Jobs__CompanyID__7EC1CEDB");

                    b.HasOne("KoRadio.Services.Database.Freelancer", "Freelancer")
                        .WithMany("Jobs")
                        .HasForeignKey("FreelancerId")
                        .HasConstraintName("FK__Jobs__Freelancer__214BF109");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Jobs__UserID__4F47C5E3");

                    b.Navigation("Company");

                    b.Navigation("Freelancer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.JobsService", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Job", "Job")
                        .WithMany("JobsServices")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__JobsServi__JobId__7849DB76");

                    b.HasOne("KoRadio.Services.Database.Service", "Service")
                        .WithMany("JobsServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__JobsServi__Servi__793DFFAF");

                    b.Navigation("Job");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Message", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("Messages")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Messages__Compan__7E8CC4B1");

                    b.HasOne("KoRadio.Services.Database.Store", "Store")
                        .WithMany("Messages")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__Messages__StoreI__7F80E8EA");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Messages__UserID__2CBDA3B5");

                    b.Navigation("Company");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Order", b =>
                {
                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.OrderItem", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.HasOne("KoRadio.Services.Database.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Products");

                    b.HasOne("KoRadio.Services.Database.Store", "Store")
                        .WithMany("OrderItems")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_OrderItems_Stores");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Product", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Stores");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("KoRadio.Services.Database.ProductsService", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Product", "Product")
                        .WithMany("ProductsServices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductsS__Produ__4DE98D56");

                    b.HasOne("KoRadio.Services.Database.Service", "Service")
                        .WithMany("ProductsServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductsS__Servi__4EDDB18F");

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Store", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Location", "Location")
                        .WithMany("Stores")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__Stores__Location__4460231C");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Stores_Users");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Tender", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("Tenders")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__Tender__CompanyI__5C37ACAD");

                    b.HasOne("KoRadio.Services.Database.Freelancer", "Freelancer")
                        .WithMany("Tenders")
                        .HasForeignKey("FreelancerId")
                        .HasConstraintName("FK__Tender__Freelanc__5B438874");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("Tenders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Tender__UserId__5A4F643B");

                    b.Navigation("Company");

                    b.Navigation("Freelancer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.TenderBid", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("TenderBids")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__TenderBid__Compa__61F08603");

                    b.HasOne("KoRadio.Services.Database.Freelancer", "Freelancer")
                        .WithMany("TenderBids")
                        .HasForeignKey("FreelancerId")
                        .HasConstraintName("FK__TenderBid__Freel__60FC61CA");

                    b.HasOne("KoRadio.Services.Database.Job", "Job")
                        .WithMany("TenderBids")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TenderBid__JobId__6A85CC04");

                    b.Navigation("Company");

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("KoRadio.Services.Database.TenderService", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Service", "Service")
                        .WithMany("TenderServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__TenderSer__Servi__67A95F59");

                    b.HasOne("KoRadio.Services.Database.Tender", "Tender")
                        .WithMany("TenderServices")
                        .HasForeignKey("TenderId")
                        .IsRequired()
                        .HasConstraintName("FK__TenderSer__Tende__66B53B20");

                    b.Navigation("Service");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("KoRadio.Services.Database.User", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__LocationI__0E391C95");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KoRadio.Services.Database.UserRating", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Company", "Company")
                        .WithMany("UserRatings")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__UserRatin__Compa__6B79F03D");

                    b.HasOne("KoRadio.Services.Database.Freelancer", "Freelancer")
                        .WithMany("UserRatings")
                        .HasForeignKey("FreelancerId")
                        .HasConstraintName("FK__UserRatin__Freel__42ACE4D4");

                    b.HasOne("KoRadio.Services.Database.Job", "Job")
                        .WithMany("UserRatings")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__UserRatin__JobId__4589517F");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserRatin__UserI__41B8C09B");

                    b.Navigation("Company");

                    b.Navigation("Freelancer");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.UserRole", b =>
                {
                    b.HasOne("KoRadio.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleI__16CE6296");

                    b.HasOne("KoRadio.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserI__15DA3E5D");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Company", b =>
                {
                    b.Navigation("CompanyEmployees");

                    b.Navigation("CompanyRoles");

                    b.Navigation("CompanyServices");

                    b.Navigation("EmployeeTasks");

                    b.Navigation("Jobs");

                    b.Navigation("Messages");

                    b.Navigation("TenderBids");

                    b.Navigation("Tenders");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyEmployee", b =>
                {
                    b.Navigation("CompanyJobAssignments");

                    b.Navigation("EmployeeTasks");
                });

            modelBuilder.Entity("KoRadio.Services.Database.CompanyRole", b =>
                {
                    b.Navigation("CompanyEmployees");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Freelancer", b =>
                {
                    b.Navigation("FreelancerServices");

                    b.Navigation("Jobs");

                    b.Navigation("TenderBids");

                    b.Navigation("Tenders");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Job", b =>
                {
                    b.Navigation("CompanyJobAssignments");

                    b.Navigation("EmployeeTasks");

                    b.Navigation("JobsServices");

                    b.Navigation("TenderBids");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Location", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductsServices");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Service", b =>
                {
                    b.Navigation("CompanyServices");

                    b.Navigation("FreelancerServices");

                    b.Navigation("JobsServices");

                    b.Navigation("ProductsServices");

                    b.Navigation("TenderServices");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Store", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("OrderItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("KoRadio.Services.Database.Tender", b =>
                {
                    b.Navigation("TenderServices");
                });

            modelBuilder.Entity("KoRadio.Services.Database.User", b =>
                {
                    b.Navigation("CompanyEmployees");

                    b.Navigation("Freelancer");

                    b.Navigation("Jobs");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("Stores");

                    b.Navigation("Tenders");

                    b.Navigation("UserRatings");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
